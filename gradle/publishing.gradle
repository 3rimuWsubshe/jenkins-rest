buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath "org.ajoberstar:gradle-git:$depVersions.gradleGit"
    }
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("$sonatypeURL/service/local/"))
            snapshotRepositoryUrl.set(uri("$sonatypeURL/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact testsJar
            artifact docsJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Jenkins Rest')
                root.appendNode('description', 'Java client for working with Jenkins REST API.')
                root.appendNode('url', 'https://github.com/jrestclients/jenkins-rest')
                root.appendNode('inceptionYear', '2016')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/jrestclients/jenkins-rest')
                scm.appendNode('connection', 'scm:https://martinda@github.com/jrestclients/jenkins-rest.git')
                scm.appendNode('developerConnection', 'scm:git://github.com/jrestclients/jenkins-rest.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def cdancy = developers.appendNode('developer')
                cdancy.appendNode('id', 'cdancy')
                cdancy.appendNode('name', 'Christopher Dancy')
                cdancy.appendNode('email', 'christoforever@gmail.com')
                def martinda = developers.appendNode('developer')
                martinda.appendNode('id', 'martinda')
                martinda.appendNode('name', "Martin d'Anjou")
                martinda.appendNode('email', 'martin.danjou14@gmail.com')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


System.setProperty('org.ajoberstar.grgit.auth.username', project.githubUsername)
System.setProperty('org.ajoberstar.grgit.auth.password', project.githubPassword)

ext.repo = org.ajoberstar.grgit.Grgit.open(rootDir)

task createTag {
    description = 'Creates repository tag with current project version.'
    ext.tagName = "v${project.version}"

    doLast {
        logger.quiet "Creating tag '$tagName'."

        // Remove potentially existing tag
        repo.tag.remove(names: [tagName])

        // Create tag
        repo.tag.add {
            name = tagName
            message = "Version ${project.version}"
        }
    }
}

task pushTag {
    description = 'Pushes tag to remote repository.'
    dependsOn createTag

    doLast {
        logger.quiet "Pushing tag '$createTag.tagName' to remote."
        repo.push {
            refsOrSpecs = [createTag.tagName]
        }
    }
}

task tag {
    dependsOn pushTag
    mustRunAfter "publishToSonatype", "closeAndReleaseSonatypeStagingRepository"
}

task release {
    description = 'Publishes artifacts to Bintray and tags repository with current project version.'
    dependsOn assemble, publishGhPages, "publishToSonatype", "closeAndReleaseSonatypeStagingRepository", tag
}
