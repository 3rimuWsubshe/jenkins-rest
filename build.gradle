buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.6'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.bmuschko.docker-remote-api'

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    jcenter()
}

dependencies {
    ext.jcloudsVersion = '2.1.0'

    compile ("org.apache.jclouds:jclouds-core:${jcloudsVersion}") 
    compile ('com.google.auto.service:auto-service:1.0-rc3') 
    compileOnly ('com.google.auto.value:auto-value:1.5.3')
    
    testCompile ("org.apache.jclouds:jclouds-core:${jcloudsVersion}:tests")
    testCompile ("org.apache.jclouds.driver:jclouds-slf4j:${jcloudsVersion}") 
    testCompile ('org.testng:testng:6.11') 
    testCompile ('org.assertj:assertj-core:3.8.0') 
    testCompile ('com.squareup.okhttp:mockwebserver:2.7.5') 
    testCompile ('ch.qos.logback:logback-core:1.2.3') 
    testCompile ('ch.qos.logback:logback-classic:1.2.3')
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Jenkins REST client',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    useTestNG() 
    include '**/**MockTest.class'
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: ['mockTest']) {
    useTestNG() 
    include "**/**LiveTest.class"
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    } 
    doFirst {
    	String runtimeURL = bootstrapDocker ? "http://${getLocalHost()}:8080" : "${testJenkinsEndpoint}"
    	systemProperties = ["test.jenkins.endpoint" : runtimeURL]
    }
}

if (bootstrapDocker) {
    def integTestTask = project.tasks.getByName('integTest')
    integTestTask.dependsOn('startNode')
    integTestTask.finalizedBy('teardownNode')
}

artifactory {
    contextUrl = artifactoryURL
    publish {
        repository {
            repoKey = version.endsWith('-SNAPSHOT') ? snapshotRepository : releaseRepository
            username = artifactoryUser
            password = artifactoryPassword
            mavenCompatible = true
        }
        defaults {
            publications ('artifactoryJava')
        }
    }
}

publishing {
    publications {
        artifactoryJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

docker {
    url = testDockerEndpoint
}

ext.jenkinsContainerName = "jenkins-integ-test"

task inspectNode(type: com.bmuschko.gradle.docker.tasks.container.DockerInspectContainer) {
    targetContainerId { jenkinsContainerName }
}

task pullImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPullImage) {
    repository = testJenkinsImage
    tag = testJenkinsTag
}

task stopNode(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
    onlyIf { checkNode() }
    dependsOn pullImage
    targetContainerId { jenkinsContainerName }
    timeout = 30
}

task removeNode(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
    onlyIf { checkNode() }
    dependsOn stopNode
    targetContainerId { jenkinsContainerName }
    removeVolumes = true
    force = true
}

task createNode(type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
    dependsOn removeNode
    targetImageId { pullImage.repository + ":" + pullImage.tag }
    containerName = jenkinsContainerName
    portBindings = ['8080:8080']
}

task startNode(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
    dependsOn createNode
    targetContainerId { createNode.getContainerId() }
    doLast {
    	logger.quiet "Sleeping for 20 seconds to allow container to init..."
    	sleep(20000)
    }
}

task postTestStopNode(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
    targetContainerId { jenkinsContainerName }
    timeout = 30
}

task teardownNode(type: com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer) {
    dependsOn postTestStopNode
    targetContainerId { jenkinsContainerName }
    removeVolumes = true
    force = true
}

public boolean checkNode() {
	boolean containerFound = false
	try {
		Task inspect = project.tasks.getByName("inspectNode")
		inspect.execute()
		containerFound = true
	} catch (Exception e) {
		// println e.message
	}
	containerFound
}

public String getLocalHost() {
    InetAddress.getLocalHost().getHostAddress()
}

